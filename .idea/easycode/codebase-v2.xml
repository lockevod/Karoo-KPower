<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/app/src/main/kotlin/com/enderthor/kpower/activity/MainActivity.kt;/Users/sergi/AndroidStudioProjects/Power Extension/app/src/main/kotlin/com/enderthor/kpower/data/ConfigData.kt;/Users/sergi/AndroidStudioProjects/Power Extension/app/src/main/kotlin/com/enderthor/kpower/data/GpsCoordinates.kt;/Users/sergi/AndroidStudioProjects/Power Extension/app/src/main/kotlin/com/enderthor/kpower/data/HeadwindSpeedDataType.kt;/Users/sergi/AndroidStudioProjects/Power Extension/app/src/main/kotlin/com/enderthor/kpower/data/OpenMeteoData.kt;/Users/sergi/AndroidStudioProjects/Power Extension/app/src/main/kotlin/com/enderthor/kpower/extension/Extensions.kt;/Users/sergi/AndroidStudioProjects/Power Extension/app/src/main/kotlin/com/enderthor/kpower/extension/KpowerExtension.kt;/Users/sergi/AndroidStudioProjects/Power Extension/app/src/main/kotlin/com/enderthor/kpower/screens/KarooKeyDropdown.kt;/Users/sergi/AndroidStudioProjects/Power Extension/app/src/main/kotlin/com/enderthor/kpower/screens/PowerConfigDetailScreen.kt;/Users/sergi/AndroidStudioProjects/Power Extension/app/src/main/kotlin/com/enderthor/kpower/screens/PowerConfigMainScreen.kt;/Users/sergi/AndroidStudioProjects/Power Extension/app/src/main/kotlin/com/enderthor/kpower/screens/TabLayout.kt;/Users/sergi/AndroidStudioProjects/Power Extension/app/src/main/kotlin/com/enderthor/kpower/vdevice/CyclingWattageEstimator.kt;/Users/sergi/AndroidStudioProjects/Power Extension/app/src/main/kotlin/com/enderthor/kpower/vdevice/EstimatedPowerSource.kt;/Users/sergi/AndroidStudioProjects/Power Extension/app/src/main/kotlin/com/enderthor/kpower/KpowerApplication.kt;/Users/sergi/AndroidStudioProjects/Power Extension/app/build.gradle.kts;/Users/sergi/AndroidStudioProjects/Power Extension/app/manifest.json;/Users/sergi/AndroidStudioProjects/Power Extension/build.gradle.kts;/Users/sergi/AndroidStudioProjects/Power Extension/README.md;/Users/sergi/AndroidStudioProjects/Power Extension/settings.gradle.kts" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;/Users/sergi/AndroidStudioProjects/Power Extension&quot;:&quot;{\&quot;/app/src/main/kotlin/com/enderthor/kpower/data/GpsCoordinates.kt\&quot;:\&quot;This file defines a `GpsCoordinates` class and a `distanceTo` function.\\n\\n`GpsCoordinates`: A data class that represents a set of GPS coordinates, including latitude, longitude, and optional bearing.\\n\\n`distanceTo`: A function that calculates the distance in kilometers between two `GpsCoordinates` objects using the Haversine formula.\&quot;,\&quot;/app/src/main/kotlin/com/enderthor/kpower/screens/PowerConfigDetailScreen.kt\&quot;:\&quot;This file contains a single Composable function:\\n\\n`DetailScreen`: This function creates a screen that allows the user to view, edit, and save a power configuration, including settings such as bike mass, rolling resistance coefficient, drag coefficient, frontal area, power loss, headwind, API key, FTP, and surface type.\\n\\nThe file also includes several helper functions and variables used within the `DetailScreen` Composable function.\&quot;,\&quot;/app/src/main/kotlin/com/enderthor/kpower/extension/KpowerExtension.kt\&quot;:\&quot;This file contains a Kotlin class `KpowerExtension` that extends the `KarooExtension` class. The `KpowerExtension` class is responsible for managing the lifecycle of a Karoo system extension, including connecting to the Karoo system, updating GPS coordinates, and fetching weather data.\\n\\n`KpowerExtension`: A Karoo system extension that manages the lifecycle of the extension, including connecting to the Karoo system, updating GPS coordinates, and fetching weather data.\\n\\n`onCreate()`: Initializes the Karoo system service, starts a job to update the last known GPS coordinates, and launches a coroutine to handle the main functionality of the extension.\\n\\n`startScan(Emitter\\u003cDevice\\u003e)`: Starts a scan for an estimated power source and emits the source to the provided `Emitter`.\\n\\n`connectDevice(String, Emitter\\u003cDeviceEvent\\u003e)`: Connects a device with the given UID to the extension and emits device events to the provided `Emitter`.\\n\\n`onDestroy()`: Disconnects the Karoo system service and calls the superclass\\u0027s `onDestroy()` method.\&quot;,\&quot;/app/build.gradle.kts\&quot;:\&quot;This file is a Gradle build script for an Android application. It defines the plugins, Android configuration, and dependencies for the application. There are no explicit classes or functions defined in this file. Instead, it configures the build process for the Android application.\\n\\nThe key elements of this build script are:\\n\\n1. Plugins: The script applies various plugins, including the Android application plugin, Kotlin Android plugin, and Compose compiler plugin.\\n2. Android configuration: The script sets the namespace, compile SDK version, default configuration (application ID, min/target SDK versions, version code/name), and build types (release configuration).\\n3. Dependency management: The script defines the dependencies for the application, including Firebase, Hammerhead Karoo extensions, Android core and lifecycle libraries, Compose UI, Navigation, Serialization, and other utility libraries.\&quot;,\&quot;/app/src/main/kotlin/com/enderthor/kpower/data/ConfigData.kt\&quot;:\&quot;This file contains several data classes and an enum that are used to represent various data structures related to a power-based cycling application.\\n\\n`StreamData`: A data class that holds a `HeadingResponse` and an optional `OpenMeteoCurrentWeatherResponse`.\\n\\n`Quadruple`: A generic data class that holds four values of different types.\\n\\n`RealKarooValues`: A data class that holds various stream states related to cycling, such as speed, slope, elevation, cadence, headwind, pressure, and user weight.\\n\\n`KarooSurface`: An enum that represents different surface types for cycling, each with a corresponding factor.\\n\\n`ConfigData`: A data class that holds configuration data for a cycling setup, including bike mass, rolling resistance coefficient, drag coefficient, frontal area, power loss, headwind configuration, weather API key, FTP, surface type, and a flag for forcing power.\\n\\n`defaultConfigData`: A JSON-encoded list of `ConfigData` instances, representing a default configuration.\\n\\nThis file serves as a data model for the application, providing the necessary data structures to represent various cycling-related information and configurations.\&quot;,\&quot;/app/src/main/kotlin/com/enderthor/kpower/vdevice/EstimatedPowerSource2.kt\&quot;:\&quot;This file contains the implementation of the `EstimatedPowerSource2` class and several utility functions.\\n\\n`EstimatedPowerSource2`: A class that provides an estimated power source for a Karoo system, calculating the cycling wattage based on various sensor data and user profile information.\\n\\n`connect`: A function that connects the `EstimatedPowerSource2` to the Karoo system, collects relevant data, and emits the calculated cycling wattage.\\n\\n`getUserProfileFactors`: A function that extracts user profile factors (mass, distance, and elevation) from a `UserProfile` object.\\n\\n`calculatePowerBike`: A function that calculates the cycling wattage based on the provided user profile factors, power configurations, and real-time Karoo values.\\n\\n`getValueOrDefault`: A utility function that retrieves the value from a `StreamState` object or returns a default value if the object is not in the `Streaming` state.\\n\\n`toDoubleLocale`: A utility function that converts a string to a double value, handling locale-specific formatting.\\n\\n`default`: A utility function that returns a default `CyclingWattageEstimator` instance with all values set to 0.\&quot;,\&quot;/app/src/main/kotlin/com/enderthor/kpower/extension/Extensions.kt\&quot;:\&quot;This file contains various extension functions and utility classes for a Kotlin-based Android application. It handles GPS coordinates, weather data, and headwind calculations, as well as data storage and retrieval using the DataStore API. Here\\u0027s a summary of the classes and functions:\\n\\n`HeadingResponse`: A sealed class representing the different types of responses for heading calculations.\\n\\n`savePreferences`: Saves a list of `ConfigData` objects to the DataStore.\\n`saveStats`: Saves `HeadwindStats` to the DataStore.\\n`saveCurrentData`: Saves `OpenMeteoCurrentWeatherResponse` to the DataStore.\\n`streamDataFlow`: Returns a flow of `StreamState` for a given data type ID.\\n`streamCurrentWeatherData`: Returns a flow of `OpenMeteoCurrentWeatherResponse` from the DataStore.\\n`streamStats`: Returns a flow of `HeadwindStats` from the DataStore.\\n`loadPreferencesFlow`: Returns a flow of `List\\u003cConfigData\\u003e` from the DataStore.\\n`parseWeatherResponse`: Parses a weather response string into an `OpenMeteoCurrentWeatherResponse`.\\n`makeOpenMeteoHttpRequest`: Makes an HTTP request to the OpenMeteo or OpenWeather API and returns the response.\\n`getRelativeHeadingFlow`: Returns a flow of `HeadingResponse` that combines GPS and weather data.\\n`getHeadingFlow`: Returns a flow of `HeadingResponse` based on GPS data.\\n`signedAngleDifference`: Calculates the signed angle difference between two angles.\\n`concatenate`: Concatenates multiple flows into a single flow.\\n`dropNullsIfNullEncountered`: Drops null values from a flow if a null value is encountered.\\n`getGpsCoordinateFlow`: Returns a flow of `GpsCoordinates` from the Karoo system.\\n`updateLastKnownGps`: Periodically updates the last known GPS position in the DataStore.\\n`streamLocation`: Returns a flow of `OnLocationChanged` events from the Karoo system.\\n`throttle`: Throttles a flow, emitting values only after a specified timeout.\\n`saveLastKnownPosition`: Saves the last known GPS position to the DataStore.\\n`consumerFlow`: Returns a flow of a specific `KarooEvent` type.\\n`headwindFlow`: Returns a flow of `StreamState` that calculates and emits headwind speed.\&quot;,\&quot;/app/src/main/kotlin/com/enderthor/kpower/screens/TabLayout.kt\&quot;:\&quot;This file contains a Composable function `TabLayout` that creates a tab layout with two tabs: \\\&quot;Power\\\&quot; and \\\&quot;Help\\\&quot;. The \\\&quot;Power\\\&quot; tab displays the `ConfigDataAppNavHost` composable, while the \\\&quot;Help\\\&quot; tab displays the `Help` composable, which provides a detailed help text for calculating cycling wattage.\\n\\nThe file also includes a `Help` composable that displays a scrollable column of help text, explaining the various parameters required to calculate cycling wattage.\\n\\nAdditionally, there is a `PreviewTabLayout` composable function that provides a preview of the `TabLayout` composable.\&quot;,\&quot;/app/src/main/kotlin/com/enderthor/kpower/vdevice/EstimatedPowerSource.kt\&quot;:\&quot;This file contains the implementation of the `EstimatedPowerSource` class, which is responsible for providing an estimated power source for a Karoo device.\\n\\n`EstimatedPowerSource`: A class that provides an estimated power source for a Karoo device, based on various sensor data and user preferences.\\n\\n`connect`: A function that connects the `EstimatedPowerSource` to the Karoo system, starts feeding `DeviceEvent`s, and calculates the estimated power based on the collected data.\\n\\n`fromUid`: A companion function that creates an `EstimatedPowerSource` instance from a given UID.\\n\\nThe file also imports various classes and functions from the `io.hammerhead.karooext` and `com.enderthor.kpower` packages, which are used to interact with the Karoo system and manage user preferences.\&quot;,\&quot;/app/src/main/kotlin/com/enderthor/kpower/KpowerApplication.kt\&quot;:\&quot;This file contains a single class:\\n\\n`KpowerApplication`: This class is an extension of the `Application` class and is responsible for initializing the Timber logging library in the application.\\n\\nThe file does the following:\\n\\n1. Initializes the Timber logging library, which is a popular logging library for Android applications.\\n2. Checks if the application is running in debug mode and plants a `DebugTree` for Timber, which enables logging in the application.\\n3. Regardless of the build configuration, it plants a `DebugTree` for Timber and logs a message indicating that the KPower app is starting.\&quot;,\&quot;/build.gradle.kts\&quot;:\&quot;This file is a top-level build file that sets up common configuration options for all sub-projects or modules in the Android application. It does not contain any classes or functions, but instead, it applies various plugins to the build process, including:\\n\\n`alias(libs.plugins.android.application)`: Applies the Android application plugin.\\n`alias(libs.plugins.jetbrains.kotlin.android)`: Applies the Kotlin Android plugin.\\n`alias(libs.plugins.compose.compiler)`: Applies the Compose compiler plugin.\\n`id(\\\&quot;com.google.gms.google-services\\\&quot;)`: Applies the Google Services plugin for Firebase integration.\\n`id(\\\&quot;com.google.firebase.crashlytics\\\&quot;)`: Applies the Firebase Crashlytics plugin for crash reporting.\\n\\nThe purpose of this file is to centralize common build configuration settings that can be shared across all sub-projects or modules in the Android application.\&quot;,\&quot;/app/src/main/kotlin/com/enderthor/kpower/screens/KarooKeyDropdown.kt\&quot;:\&quot;This file contains a Composable function `KarooKeyDropdown` that creates a dropdown menu with a list of options. The file also defines a data class `DropdownOption` to represent each option in the dropdown menu.\\n\\n`DropdownOption`: A data class that represents a dropdown option with an ID and a name.\\n\\n`KarooKeyDropdown`: A Composable function that creates a dropdown menu with a list of options, allowing the user to select an option from the list.\&quot;,\&quot;/app/manifest.json\&quot;:\&quot;This file does not contain any classes or functions. It appears to be a JSON object that provides information about a Karoo device extension called \\\&quot;Kpower\\\&quot;. The key-value pairs in the JSON object provide details about the extension, such as the package name, latest APK URL, icon URL, latest version, developer, description, and release notes.\&quot;,\&quot;/app/src/main/kotlin/com/enderthor/kpower/vdevice/CyclingWattageEstimator.kt\&quot;:\&quot;This file contains a single class `CyclingWattageEstimator` that provides methods to estimate the cycling wattage based on various factors such as gravity, slope, total mass, rolling resistance coefficient, drag coefficient, frontal area, speed, wind speed, power loss, elevation, FTP, cadence, surface, and whether the power is force-based or not.\\n\\n`CyclingWattageEstimator`: A class that estimates the cycling wattage based on various physical factors.\\n\\n`smoothPower`: A function that smooths the estimated power based on the FTP and other factors.\\n`calculateCyclingWattage`: A function that calculates the cycling wattage by combining the forces acting on the cyclist.\\n`calculateDynamicRollingResistanceForce`: A function that calculates the dynamic rolling resistance force.\\n`calculateGravityForce`: A function that calculates the gravity force.\\n`calculateRollingResistanceForce`: A function that calculates the rolling resistance force.\\n`calculateAerodynamicDragForce`: A function that calculates the aerodynamic drag force.\&quot;,\&quot;/app/src/main/kotlin/com/enderthor/kpower/screens/PowerConfigMainScreen.kt\&quot;:\&quot;This file contains a Compose-based UI for managing configuration data. It includes the following classes and functions:\\n\\n`ConfigDataAppNavHost`: A composable function that sets up the navigation for the app, including screens for listing, creating, and editing configuration data.\\n\\n`MainScreen`: A composable function that displays the list of configuration data items in a scrollable column, with each item displayed as a card.\\n\\n`PreviewTabLayout`: A composable function that provides a preview of the `ConfigDataAppNavHost` composable.\\n\\nThe file also includes several utility functions and imports for working with Compose, navigation, and configuration data management.\&quot;,\&quot;/app/src/main/kotlin/com/enderthor/kpower/activity/MainActivity.kt\&quot;:\&quot;This file appears to be an Android Kotlin code that sets up a main activity and a composable function for a tab layout.\\n\\n`Main`: A composable function that sets up the main surface and calls the `TabLayout` composable.\\n\\n`MainActivity`: The main activity class that sets the content of the activity to the `Main` composable function.\\n\\n`dataStore`: A Kotlin extension property that provides access to the app\\u0027s data store for storing and retrieving preferences.\&quot;,\&quot;/README.md\&quot;:\&quot;This file does not contain any classes or functions. It is a documentation for a Karoo Power Extension that adds a virtual power meter to Karoo devices. The extension allows users to configure various parameters such as bike weight, rolling resistance, aerodynamic drag, and FTP to estimate cycling power. It also provides features like using wind speed data from OpenWeatherMap or OpenMeteo, and handling low cadence situations. The documentation covers installation, usage, features, and known issues of the extension.\&quot;,\&quot;/app/src/main/kotlin/com/enderthor/kpower/data/OpenMeteoData.kt\&quot;:\&quot;This file contains several data classes for handling weather data from the OpenMeteo and OpenWeather APIs, as well as a data class for storing headwind statistics.\\n\\n`OpenMeteoData`: A data class representing weather data from the OpenMeteo API, including wind speed, wind direction, and timestamp.\\n\\n`OpenWeatherData`: A data class representing wind data from the OpenWeather API, including wind speed and direction.\\n\\n`OpenWeatherCoord`: A data class representing the geographic coordinates (latitude and longitude) from the OpenWeather API.\\n\\n`OpenMeteoCurrentWeatherResponse`: A data class representing the current weather response from the OpenMeteo API, including the current weather data, location, and time zone information.\\n\\n`OpenWeatherCurrentWeatherResponse`: A data class representing the current weather response from the OpenWeather API, including the current wind data and timestamp.\\n\\n`HeadwindStats`: A data class representing the statistics for headwind requests, including the timestamp of the last successful request, the last successful position, and the timestamp of the last failed request.\\n\\n`defaultStats`: A companion object function that returns a default JSON-encoded `HeadwindStats` object.\&quot;,\&quot;/settings.gradle.kts\&quot;:\&quot;This file is a Gradle build script that configures the project\\u0027s dependency resolution and plugin management. It does not contain any classes or functions, but rather sets up the project\\u0027s build environment and dependencies.\\n\\n`pluginManagement`: Configures the plugin repositories to include Google, Maven Central, and Gradle Plugin Portal.\\n`plugins`: Adds the Foojay Resolver Convention plugin to the project.\\n`getLocalProperty`: Retrieves a property value from the `local.properties` file.\\n`dependencyResolutionManagement`: Configures the project\\u0027s repository settings, including Maven Local, Google, Maven Central, and a GitHub Packages repository for the `karoo-ext` dependency.\\n`rootProject.name`: Sets the name of the root project to \\\&quot;KPower Extension\\\&quot;.\\n`include(\\\&quot;:app\\\&quot;)`: Includes the `:app` module in the project.\&quot;}&quot;}" />
    <option name="fileSkeletonMaps" value="{&quot;/Users/sergi/AndroidStudioProjects/Power Extension&quot;:&quot;{\&quot;/app/src/main/kotlin/com/enderthor/kpower/activity/MainActivity.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/kotlin/com/enderthor/kpower/activity/MainActivity.kt\&quot;,\&quot;file_name\&quot;:\&quot;MainActivity.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/kotlin/com/enderthor/kpower/data/ConfigData.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/kotlin/com/enderthor/kpower/data/ConfigData.kt\&quot;,\&quot;file_name\&quot;:\&quot;ConfigData.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/kotlin/com/enderthor/kpower/data/GpsCoordinates.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/kotlin/com/enderthor/kpower/data/GpsCoordinates.kt\&quot;,\&quot;file_name\&quot;:\&quot;GpsCoordinates.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/kotlin/com/enderthor/kpower/data/OpenMeteoData.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/kotlin/com/enderthor/kpower/data/OpenMeteoData.kt\&quot;,\&quot;file_name\&quot;:\&quot;OpenMeteoData.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/kotlin/com/enderthor/kpower/extension/Extensions.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/kotlin/com/enderthor/kpower/extension/Extensions.kt\&quot;,\&quot;file_name\&quot;:\&quot;Extensions.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/kotlin/com/enderthor/kpower/extension/KpowerExtension.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/kotlin/com/enderthor/kpower/extension/KpowerExtension.kt\&quot;,\&quot;file_name\&quot;:\&quot;KpowerExtension.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/kotlin/com/enderthor/kpower/screens/KarooKeyDropdown.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/kotlin/com/enderthor/kpower/screens/KarooKeyDropdown.kt\&quot;,\&quot;file_name\&quot;:\&quot;KarooKeyDropdown.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/kotlin/com/enderthor/kpower/screens/PowerConfigDetailScreen.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/kotlin/com/enderthor/kpower/screens/PowerConfigDetailScreen.kt\&quot;,\&quot;file_name\&quot;:\&quot;PowerConfigDetailScreen.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/kotlin/com/enderthor/kpower/screens/PowerConfigMainScreen.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/kotlin/com/enderthor/kpower/screens/PowerConfigMainScreen.kt\&quot;,\&quot;file_name\&quot;:\&quot;PowerConfigMainScreen.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/kotlin/com/enderthor/kpower/screens/TabLayout.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/kotlin/com/enderthor/kpower/screens/TabLayout.kt\&quot;,\&quot;file_name\&quot;:\&quot;TabLayout.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/kotlin/com/enderthor/kpower/vdevice/CyclingWattageEstimator.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/kotlin/com/enderthor/kpower/vdevice/CyclingWattageEstimator.kt\&quot;,\&quot;file_name\&quot;:\&quot;CyclingWattageEstimator.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/kotlin/com/enderthor/kpower/vdevice/EstimatedPowerSource.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/kotlin/com/enderthor/kpower/vdevice/EstimatedPowerSource.kt\&quot;,\&quot;file_name\&quot;:\&quot;EstimatedPowerSource.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/kotlin/com/enderthor/kpower/vdevice/EstimatedPowerSource2.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/kotlin/com/enderthor/kpower/vdevice/EstimatedPowerSource2.kt\&quot;,\&quot;file_name\&quot;:\&quot;EstimatedPowerSource2.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/kotlin/com/enderthor/kpower/KpowerApplication.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/kotlin/com/enderthor/kpower/KpowerApplication.kt\&quot;,\&quot;file_name\&quot;:\&quot;KpowerApplication.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/build.gradle.kts\&quot;:{\&quot;file_path\&quot;:\&quot;/app/build.gradle.kts\&quot;,\&quot;file_name\&quot;:\&quot;build.gradle.kts\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/manifest.json\&quot;:{\&quot;file_path\&quot;:\&quot;/app/manifest.json\&quot;,\&quot;file_name\&quot;:\&quot;manifest.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/build.gradle.kts\&quot;:{\&quot;file_path\&quot;:\&quot;/build.gradle.kts\&quot;,\&quot;file_name\&quot;:\&quot;build.gradle.kts\&quot;,\&quot;methods\&quot;:[]},\&quot;/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/settings.gradle.kts\&quot;:{\&quot;file_path\&quot;:\&quot;/settings.gradle.kts\&quot;,\&quot;file_name\&quot;:\&quot;settings.gradle.kts\&quot;,\&quot;methods\&quot;:[]}}&quot;}" />
  </component>
</project>